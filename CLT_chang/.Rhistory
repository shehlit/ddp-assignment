plot2 <- ggplot(mtcars, aes(wt, mpg)) +
geom_point(aes(shape = factor(trans)))
plot2
```
fit1 <- lm(mpg~factor(am), mtcars)
summary(fit1)$coef
?mtcars
fit2 <- lm(mpg~wt, mtcars)
fit3 <- update(fit2, mpg~wt+disp)
fit4 <- update(fit2, mpg~wt+disp+hp)
anova(fit2,fit3,fit4)
vif(fit4)
library(car)
vif(fit4)
vif(fit3)
fit5 <- lm(mpg~., mtcars)
vif(fit5)
mtcars
data("mtcars")
fit5 <- lm(mpg~., mtcars)
vif(fit5)
fit5 <- lm(mpg~disp, mtcars)
fit6 <- lm(mpg~hp, mtcars)
anova(fit2, fit3, fit4, fit5, fit6)
anova(fit4, fit2, fit3)
anova(fit3, fit4, fit5)
anova(fit5, fit4, fit3)
anova(fit5, fit3, fit4)
fit7 <- lm(mpg~disp+hp, mtcars)
anova(fit6, fit7, fit4)
summary(fit4)
summary(fit2)
summary(fit3)
summary(fit5)
summary(fit6)
vif(fit4)
vif(fit5)
vif(fit3)
vif(fit6)
vif(fit7)
vif(fit2)
vif(fit8)
fit8 <- lm(mpg~wt+hp, mtcars)
vif(fit8)
fit9 <- lm(mpg~., mtcars)
vif(fit9)
fit10 <- lm(mpg~.-cyl, mtcars)
vif(fit10)
fit10 <- lm(mpg~.-disp, mtcars)
vif(fit10)
fit10 <- lm(mpg~.-hp, mtcars)
vif(fit10)
fit10 <- lm(mpg~.-wt, mtcars)
vif(fit10)
fit4 <- lm(mpg~hp, mtcars)
fit2 <- lm(mpg~wt, mtcars)
fit3 <- lm(mpg~disp, mtcars)
fit4 <- lm(mpg~hp, mtcars)
rbind(summary(fit2)$coef[2,], summary(fit3)$coef[2,], summary(fit4)$coef[2,])
fit5 <- lm(mpg~wt+disp+hp, mtcars)
summary(fit5)$coef
install.packages("caret")
install.packages("ISLR")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
install.packages("Hmisc")
library(Hmisc)
?qplot
qplot(y = concrete$CompressiveStrength)
qplot(y = concrete$CompressiveStrength, color = concrete$Cement)
qplot(y = concrete$CompressiveStrength, color = concrete$BlastFurnaceSlag)
qplot(y = concrete$CompressiveStrength, color = concrete$FlyAsh)
qplot(y = concrete$CompressiveStrength, color = concrete$Water)
qplot(y = concrete$CompressiveStrength, color = concrete$Superplasticizer)
qplot(y = concrete$CompressiveStrength, color = concrete$CoarseAggregate)
qplot(y = concrete$CompressiveStrength, color = concrete$FineAggregate)
qplot(y = concrete$CompressiveStrength, color = concrete$Age)
qplot(y = concrete$CompressiveStrength, color = concrete$FlyAsh)
qplot(y = training$CompressiveStrength, color = training$FlyAsh)
qplot(y = training$CompressiveStrength, color = training$Cement)
qplot(y = concrete$CompressiveStrength, color = concrete$FlyAsh)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
names(training)
library((dplyr))
library(dplyr
)
trainsub <- select(training, IL11: IL8)
trainsub <- select(training, "IL11": "IL8")
trainsub <- select(training, IL_11: IL_8)
summary(trainsub)
preProc <- preProcess(trainsub, method="pca")
summary(preProc)
preProc <- preProcess(trainsub, method="pca", pcaComp = 3)
summary(preProc)
preProc
preProc <- preProcess(trainsub, method="pca")
preProc
?preProcess
preProc <- preProcess(trainsub, method="pca", thresh = 0.9)
preProc
names(training)
trainsub2 <- select(training, diagnosis, IL_11: IL_8)
names(trainsub2)
preProc2 <- preProcess(trainsub2[,-1], method = "pca", thresh = 0.8)
?train
trainsub2PC <- predict(preProc2, trainsub2[,-1])
modelFitPCA <- train(trainsub2$diagnosis ~ . , method = "glm", data = trainsub2PC)
modelFitPCA <- train(trainsub2$diagnosis ~ ., method = "glm", data = trainsub2PC)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
modelFitPCA <- train(trainsub2$diagnosis ~ ., method = "glm", data = trainsub2PC)
library(caret)
modelFitPCA <- train(trainsub2$diagnosis ~ ., method = "glm", data = trainsub2PC)
modelFitPCA <- train(trainsub2$diagnosis ~ ., method = "glm", data = trainsub2)
modelFitPCA <- train(trainsub2$diagnosis ~ ., method = "glm", data = trainsub2PC)
modelFit <- train(trainsub2$diagnosis ~ ., method = "glm", data = trainsub2)
confusionMatrix(testing$diagnosis, predict(ModelFit, testing))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainsub2 <- select(training, diagnosis, IL_11: IL_8)
library(dplyr)
trainsub2 <- select(training, diagnosis, IL_11: IL_8)
preProc2 <- preProcess(trainsub2[,-1], method = "pca", thresh = 0.8)
trainsub2PC <- predict(preProc2, trainsub2[,-1])
modelFitPCA <- train(trainsub2$diagnosis ~ ., method = "glm", data = trainsub2PC)
testPCA <- predict(preProc2, testing[,-1])
confusionMatrix(testing$diagnosis, predict(modelFitPCA, testPCA))
modelFit <- train(trainsub2$diagnosis ~ ., method = "glm", data = trainsub2)
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
?createDataPartition
install.packages("rpart")
install.packages("ElemStatLearn")
install.packages("AppliedPredictiveModeling")
install.packages("pgmm")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
str(segmentationOriginal)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
?segmentationOriginal
modFit <- train(Class~., method = "rpart", data=training)
?predict
predict(modFit, TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
predict(modFit, TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
print(modFit$finalModel)
predict(modFit, segmentationOriginal$TotalIntench2 = 23,000, segmentationOriginal$FiberWidthCh1 = 10, segmentationOriginal$PerimStatusCh1=2)
predict(modFit, segmentationOriginal$TotalIntench2=23,000, segmentationOriginal$FiberWidthCh1 = 10, segmentationOriginal$PerimStatusCh1=2)
predict(modFit, segmentationOriginal$TotalIntench2 == 23,000, segmentationOriginal$FiberWidthCh1 == 10, segmentationOriginal$PerimStatusCh1==2)
predict(modFit, segmentationOriginal$TotalIntench2 == 23000, segmentationOriginal$FiberWidthCh1 == 10, segmentationOriginal$PerimStatusCh1==2)
predict(modFit, testing)
print(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- rpart(Area ~ ., method='class', data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(fit, newdata)
t(colMeans(olive))
?tree
??tree
install.packages("tree")
library(tree)
fit1 <- tree(Area~., olive, method='class')
predict(fit1, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
fit2 <- train(chd~age+obesity+alcohol+tobacco+typea+ldl, method='glm', family="binomial")
fit2 <- train(chd~age+obesity+alcohol+tobacco+typea+ldl, data=trainSA, method='glm', family="binomial")
?train
fit2 <- train(chd~age+obesity+alcohol+tobacco+typea+ldl, data=trainSA, method='glm', family=binomial())
fit2 <- train(chd~age+obesity+alcohol+tobacco+typea+ldl, data=trainSA, method="glm", family=binomial())
fit2 <- train(chd~age+obesity+alcohol+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
fit2
summary(fit2)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,fit2)
pred1 <- predict(fit2, trainSA)
pred2 <- predict(fit2, testSA)
missClass(trainSA$chd, pred1)
missClass(testSA$chd, pred2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train <- as.factor(vowel.train$y)
vowel.test <- as.factor(vowel.test$y)
set.seed(33833)
fit3 <- train(y~. data=vowel.train, method = "rf", prox=TRUE)
fit3 <- train(y~, data=vowel.train, method = "rf", prox=TRUE)
fit3 <- train(y~., data=vowel.train, method = "rf", prox=TRUE)
class(vowel.train)
data("vowel.train")
data("vowel.test")
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit3 <- train(y~., data=vowel.train, method = "rf", prox=TRUE)
varImp(fit3)
varImp(fit3, vowel.test)
?varImp
fit4 <- train(y~., data=vowel.test, method = "rf", prox=TRUE)
varImp(fit4)
newdata
?olive
str(olive)
install.packages("randomForest")
library(randomForest)
fit3 <- train(y~., data=vowel.train, method = "rf", prox=TRUE)
library(caret)
fit3 <- train(y~., data=vowel.train, method = "rf", prox=TRUE)
varImp(fit3)
fit4 <- train(y~., data=vowel.test, method = "rf", prox=TRUE)
varImp(fit4)
install.packages("gbm")
install.packages("forecast")
install.packages("e1071")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
data(vowel.train)
data(vowel.test)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit1 <- train(y~., data = vowel.train, method = "rf")
fit2 <- train(y~., data=vowel.train, method="gbm")
pred1 <- predict(fit1, vowel.test)
pred2 <- predict(fit2, vowel.test)
pred1
fit1 <- train(y~., data = vowel.train, method = "rf", prox=TRUE)
pred1 <- predict(fit1, vowel.test)
confusionMatrix(pred1, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
?vowel.train
?vowel.test
ls()
clear(ls())
library(caret)
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
fit1 <- train(y~., data=vowel.train)
fit1 <- train(y~., data=vowel.train, method = "rf")
fit2 <- train(y~., data=vowel.train, method = "gbm")
pred1 <- predict(fit1, vowel.test)
pred2 <- predict(fit2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
sum(pred1 == vowel.test$y) / length(pred1)
class(vowel.train$y)
sum(pred2 == vowel.test$y) / length(pred1)
agree <- vowel.test[pred1 == pred2, ]
length(agree$y)
length(agree$y) / length(pred1)
pred_c = predict(fit1, agree)
sum(pred_c == agree$y)/ length(pred_c)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='shehlit',
token='BAE95E07FABCC736FE3E66918866A206',
secret='<SECRET>')
rsconnect::setAccountInfo(name='shehlit', token='BAE95E07FABCC736FE3E66918866A206', secret='<SECRET>')
rsconnect::setAccountInfo(name='shehlit', token='BAE95E07FABCC736FE3E66918866A206', secret='3nd4YG0bl6KD6rvZM9btleNGkY9+2DhPWr86LfXR')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("shiny")
library(shiny)
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
rexp(40,0.2)
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
class(mns)
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
mns <- NULL
x <- for (i in 1:50){mns = c(mns, mean(rexp(40,0.2)))}
x <- for (i in 1:50){x = c(x, mean(rexp(40,0.2)))}
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
shiny::runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
shiny::runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
runApp('D:/Coursera/C9 DDP/project/CLT')
install.packages("stringr")
install.packages("stringr")
install.packages("stringr", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("stringr", dependencies = TRUE, INSTALL_opts = c("--no-lock"))
install.packages("stringr", dependencies = TRUE, INSTALL_opts = c("--no-lock"))
shiny::runApp('D:/Coursera/C9 DDP/project/CLT')
shiny::runApp('D:/Coursera/C9 DDP/project/CLT')
library(shiny)
library(shiny)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot <- renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
sessionInfo()
install.packages("evaluate")
set1000 <- NULL
set1000 <- sapply(1:1000, function(x) mean(rexp(40,0.2)))
class(set1000)
?plt
?par
library(gridExtra)
set.seed(1)
set10 <- NULL
set10 <- sapply(1:10, function(x) mean(rexp(40,0.2)))
set.seed(2)
set100 <- NULL
set100 <- sapply(1:100, function(x) mean(rexp(40,0.2)))
set.seed(3)
set1000 <- NULL
set1000 <- sapply(1:1000, function(x) mean(rexp(40,0.2)))
par(mfrow = c(1,3), pty = "s", p1t = "top", pin = c(2,2))
hist(set10, main = "Distribution of \n 10 Averages", xlab = "Averages", freq = FALSE)
curve(dnorm(x, mean=5, sd=sqrt(0.625)), add = TRUE, col="green", lwd = 4)
curve(dnorm(x, mean=mean(set10), sd=sd(set10)), add = TRUE, col="black", lwd = 2)
lines(density(set10), col="red", lwd = 2)
hist(set100, main = "Distribution of \n 100 Averages", xlab = "Averages", freq = FALSE)
curve(dnorm(x, mean=5, sd=sqrt(0.625)), add = TRUE, col="green", lwd = 4)
curve(dnorm(x, mean=mean(set100), sd=sd(set100)), add = TRUE, col="black", lwd = 2)
lines(density(set100), col="red", lwd = 2)
hist(set1000, main = "Distribution of \n 1000 Averages", xlab = "Averages", freq = FALSE)
curve(dnorm(x, mean=5, sd=sqrt(0.625)), add = TRUE, col="green", lwd = 4)
curve(dnorm(x, mean=mean(set1000), sd=sd(set1000)), add = TRUE, col="black", lwd = 2)
lines(density(set1000), col="red", lwd = 2)
library(ggplot2)
ggplot(set10)+geom_histogram()
setwd("D:/Coursera/C9 DDP/project/CLT/CLT_chang")
dev.off()
#dev.off()
#lines(density(set10), col="red", lwd = 2)
#lines(density(set10), col="red", lwd = 2)
source('D:/Coursera/C9 DDP/project/CLT/CLT_chang/plot1.R')
source('D:/Coursera/C9 DDP/project/CLT/CLT_chang/plot1.R')
source('D:/Coursera/C9 DDP/project/CLT/CLT_chang/plot1.R')
source('D:/Coursera/C9 DDP/project/CLT/CLT_chang/plot1.R')
source('D:/Coursera/C9 DDP/project/CLT/CLT_chang/plot1.R')
source('D:/Coursera/C9 DDP/project/CLT/CLT_chang/plot1.R')
shiny::runApp('D:/Coursera/C9 DDP/project/CLT')
